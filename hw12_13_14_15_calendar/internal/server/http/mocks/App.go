// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/vrnvgasu/home_work/hw12_13_14_15_calendar/internal/storage"
)

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

type App_Expecter struct {
	mock *mock.Mock
}

func (_m *App) EXPECT() *App_Expecter {
	return &App_Expecter{mock: &_m.Mock}
}

// CreateEvent provides a mock function with given fields: ctx, e
func (_m *App) CreateEvent(ctx context.Context, e storage.Event) (storage.Event, error) {
	ret := _m.Called(ctx, e)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 storage.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Event) (storage.Event, error)); ok {
		return rf(ctx, e)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Event) storage.Event); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Get(0).(storage.Event)
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Event) error); ok {
		r1 = rf(ctx, e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// App_CreateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvent'
type App_CreateEvent_Call struct {
	*mock.Call
}

// CreateEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - e storage.Event
func (_e *App_Expecter) CreateEvent(ctx interface{}, e interface{}) *App_CreateEvent_Call {
	return &App_CreateEvent_Call{Call: _e.mock.On("CreateEvent", ctx, e)}
}

func (_c *App_CreateEvent_Call) Run(run func(ctx context.Context, e storage.Event)) *App_CreateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.Event))
	})
	return _c
}

func (_c *App_CreateEvent_Call) Return(_a0 storage.Event, _a1 error) *App_CreateEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *App_CreateEvent_Call) RunAndReturn(run func(context.Context, storage.Event) (storage.Event, error)) *App_CreateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// EventList provides a mock function with given fields: ctx, params
func (_m *App) EventList(ctx context.Context, params storage.Params) ([]storage.Event, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for EventList")
	}

	var r0 []storage.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Params) ([]storage.Event, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Params) []storage.Event); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// App_EventList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventList'
type App_EventList_Call struct {
	*mock.Call
}

// EventList is a helper method to define mock.On call
//   - ctx context.Context
//   - params storage.Params
func (_e *App_Expecter) EventList(ctx interface{}, params interface{}) *App_EventList_Call {
	return &App_EventList_Call{Call: _e.mock.On("EventList", ctx, params)}
}

func (_c *App_EventList_Call) Run(run func(ctx context.Context, params storage.Params)) *App_EventList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.Params))
	})
	return _c
}

func (_c *App_EventList_Call) Return(_a0 []storage.Event, _a1 error) *App_EventList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *App_EventList_Call) RunAndReturn(run func(context.Context, storage.Params) ([]storage.Event, error)) *App_EventList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEvent provides a mock function with given fields: ctx, e
func (_m *App) UpdateEvent(ctx context.Context, e storage.Event) error {
	ret := _m.Called(ctx, e)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Event) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// App_UpdateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEvent'
type App_UpdateEvent_Call struct {
	*mock.Call
}

// UpdateEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - e storage.Event
func (_e *App_Expecter) UpdateEvent(ctx interface{}, e interface{}) *App_UpdateEvent_Call {
	return &App_UpdateEvent_Call{Call: _e.mock.On("UpdateEvent", ctx, e)}
}

func (_c *App_UpdateEvent_Call) Run(run func(ctx context.Context, e storage.Event)) *App_UpdateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.Event))
	})
	return _c
}

func (_c *App_UpdateEvent_Call) Return(_a0 error) *App_UpdateEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *App_UpdateEvent_Call) RunAndReturn(run func(context.Context, storage.Event) error) *App_UpdateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewApp creates a new instance of App. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *App {
	mock := &App{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
